import time
import random
import subprocess as sp

videos = [
    [1,"admire",0],
    [2,"ask",0],
    [3,"ask",0],
    [4,"ask",0],
    [5,"ask",0],
    [6,"ask",0],
    [7,"ask",0],
    [8,"ask",0],
    [9,"ask",0],
    [10,"badword",0],
    [11,"badword",0],
    [12,"badword",0],
    [13,"badword",0],
    [14,"badword",0],
    [15,"badword",0],
    [16,"badword",0],
    [17,"badword",0],
    [18,"bored",0],
    [19,"bored",0],
    [20,"bored",0],
    [21,"bored",0],
    [22,"bored",0],
    [23,"bored",0],
    [24,"bored",0],
    [25,"bored",0],
    [26,"celebrat",0],
    [27,"celebrat",0],
    [28,"celebrat",0],
    [29,"celebrat",0],
    [30,"celebrat",0],
    [31,"dizzy",0],
    [32,"dizzy",0],
    [33,"dizzy",0],
    [34,"dizzy",0],
    [35,"dizzy",0],
    [36,"dizzy",0],
    [37,"dizzy",0],
    [38,"dizzy",0],
    [39,"dizzy",0],
    [40,"dizzy",0],
    [41,"dizzy",0],
    [42,"dizzy",0],
    [43,"fail",0],
    [44,"fail",0],
    [45,"fail",0],
    [46,"fail",0],
    [47,"fail",0],
    [48,"fail",0],
    [49,"fail",0],
    [50,"fail",0],
    [51,"fail",0],
    [52,"fail",0],
    [53,"fail",0],
    [54,"fail",0],
    [55,"fail",0],
    [56,"fail",0],
    [57,"fail",0],
    [58,"fail",0],
    [59,"fail",0],
    [60,"fail",0],
    [61,"fail",0],
    [62,"fail",0],
    [63,"fail",0],
    [64,"fail",0],
    [65,"fail",0],
    [66,"fail",0],
    [67,"find",0],
    [68,"found",0],
    [69,"frustrated",0],
    [70,"frustrated",0],
    [71,"frustrated",0],
    [72,"frustrated",0],
    [73,"frustrated",0],
    [74,"frustrated",0],
    [75,"giggle",0],
    [76,"guarddog",0],
    [77,"guarddog",0],
    [78,"guarddog",0],
    [79,"guarddog",0],
    [80,"guarddog",0],
    [81,"guarddog",0],
    [82,"guarddog",0],
    [83,"guarddog",0],
    [84,"guarddog",0],
    [85,"guarddog",0],
    [86,"guarddog",0],
    [87,"guarddog",0],
    [88,"guarddog",0],
    [89,"guarddog",0],
    [90,"guarddog",0],
    [91,"guarddog",0],
    [92,"happy",0],
    [93,"happy",0],
    [94,"happy",0],
    [95,"happy",0],
    [96,"happy",0],
    [97,"happy",0],
    [98,"happy",0],
    [99,"happy",0],
    [100,"happy",0],
    [101,"happy",0],
    [102,"happy",0],
    [103,"happy",0],
    [104,"hello",0],
    [105,"hello",0],
    [106,"hello",0],
    [107,"hello",0],
    [108,"hello",0],
    [109,"hiccup",0],
    [110,"hiccup",0],
    [111,"hiccup",0],
    [112,"hiccup",0],
    [113,"hiccup",0],
    [114,"hiccup",0],
    [115,"hiccup",0],
    [116,"hiccup",0],
    [117,"hiccup",0],
    [118,"hiccup",0],
    [119,"highenergy",0],
    [120,"highenergy",0],
    [121,"highenergy",0],
    [122,"highenergy",0],
    [123,"highenergy",0],
    [124,"highenergy",0],
    [125,"ideatoplay",0],
    [126,"ideatoplay",0],
    [127,"ideatoplay",0],
    [128,"like",0],
    [129,"lose",0],
    [130,"lose",0],
    [131,"lose",0],
    [132,"lose",0],
    [133,"lose",0],
    [134,"lose",0],
    [135,"lose",0],
    [136,"lose",0],
    [137,"lose",0],
    [138,"lose",0],
    [139,"lose",0],
    [140,"lose",0],
    [141,"lose",0],
    [142,"lose",0],
    [143,"lose",0],
    [144,"lowenergy",0],
    [145,"lowenergy",0],
    [146,"lowenergy",0],
    [147,"lowenergy",0],
    [148,"lowenergy",0],
    [149,"lowenergy",0],
    [150,"lowenergy",0],
    [151,"match_no",0],
    [152,"match_no",0],
    [153,"newarea",0],
    [154,"newarea",0],
    [155,"newarea",0],
    [156,"petdetection",0],
    [157,"petdetection",0],
    [158,"petdetection",0],
    [159,"petdetection",0],
    [160,"petdetection",0],
    [161,"petdetection",0],
    [162,"petdetection",0],
    [163,"petdetection",0],
    [164,"petdetection",0],
    [165,"petdetection",0],
    [166,"petdetection",0],
    [167,"petdetection",0],
    [168,"petdetection",0],
    [169,"petdetection",0],
    [170,"petdetection",0],
    [171,"petdetection",0],
    [172,"petdetection",0],
    [173,"petdetection",0],
    [174,"petdetection",0],
    [175,"petdetection",0],
    [176,"petdetection",0],
    [177,"petdetection",0],
    [178,"petdetection",0],
    [179,"petdetection",0],
    [180,"petdetection",0],
    [181,"petdetection",0],
    [182,"petdetection",0],
    [183,"petdetection",0],
    [184,"petdetection",0],
    [185,"petdetection",0],
    [186,"petdetection",0],
    [187,"petdetection",0],
    [188,"playerno",0],
    [189,"playerno",0],
    [190,"playerno",0],
    [191,"playerno",0],
    [192,"playeryes",0],
    [193,"playeryes",0],
    [194,"playeryes",0],
    [195,"playeryes",0],
    [196,"reacttocube",0],
    [197,"reacttocube",0],
    [198,"reacttocube",0],
    [199,"reacttocube",0],
    [200,"reacttocube",0],
    [201,"reacttoface",0],
    [202,"reacttoface",0],
    [203,"reacttoface",0],
    [204,"reacttoface",0],
    [205,"reacttoface",0],
    [206,"reacttoface",0],
    [207,"reacttoface",0],
    [208,"reacttoface",0],
    [209,"reacttoface",0],
    [210,"reacttoface",0],
    [211,"reacttoface",0],
    [212,"reacttoface",0],
    [213,"reacttoface",0],
    [214,"reacttoface",0],
    [215,"reacttoface",0],
    [216,"reacttoface",0],
    [217,"reacttoface",0],
    [218,"reacttoface",0],
    [219,"reacttoface",0],
    [220,"reacttoface",0],
    [221,"reacttoface",0],
    [222,"reacttoface",0],
    [223,"reacttoface",0],
    [224,"reacttoface",0],
    [225,"reacttoface",0],
    [226,"reacttoface",0],
    [227,"reacttoface",0],
    [228,"reacttoface",0],
    [229,"reacttoface",0],
    [230,"reacttoface",0],
    [231,"reacttoface",0],
    [232,"reacttoface",0],
    [233,"reacttoface",0],
    [234,"reacttoface",0],
    [235,"reacttoface",0],
    [236,"reacttoface",0],
    [237,"reacttoface",0],
    [238,"reenrollment",0],
    [239,"reenrollment",0],
    [240,"reenrollment",0],
    [241,"request",0],
    [242,"request",0],
    [243,"request",0],
    [244,"request",0],
    [245,"request",0],
    [246,"request",0],
    [247,"request",0],
    [248,"request",0],
    [249,"request",0],
    [250,"request",0],
    [251,"sleep",0],
    [252,"sleep",0],
    [253,"sleep",0],
    [254,"sleep",0],
    [255,"sleep",0],
    [256,"sleep",0],
    [257,"sleep",0],
    [258,"sleep",0],
    [259,"sleep",0],
    [260,"sleep",0],
    [261,"struggle",0],
    [262,"struggle",0],
    [263,"struggle",0],
    [264,"stuck",0],
    [265,"stuck",0],
    [266,"stuck",0],
    [267,"stuck",0],
    [268,"stuck",0],
    [269,"stuck",0],
    [270,"stuck",0],
    [271,"succes",0],
    [272,"succes",0],
    [273,"succes",0],
    [274,"succes",0],
    [275,"succes",0],
    [276,"succes",0],
    [277,"succes",0],
    [278,"succes",0],
    [279,"succes",0],
    [280,"succes",0],
    [281,"succes",0],
    [282,"succes",0],
    [283,"succes",0],
    [284,"succes",0],
    [285,"succes",0],
    [286,"succes",0],
    [287,"succes",0],
    [288,"succes",0],
    [289,"succes",0],
    [290,"succes",0],
    [291,"succes",0],
    [292,"succes",0],
    [293,"succes",0],
    [294,"succes",0],
    [295,"succes",0],
    [296,"succes",0],
    [297,"succes",0],
    [298,"succes",0],
    [299,"succes",0],
    [300,"succes",0],
    [301,"succes",0],
    [302,"thankyou",0],
    [303,"thankyou",0],
    [304,"thankyou",0],
    [305,"thankyou",0],
    [306,"turbo",0],
    [307,"turbo",0],
    [308,"turbo",0],
    [309,"turbo",0],
    [310,"turbo",0],
    [311,"turbo",0],
    [312,"turbo",0],
    [313,"turtleroll",0],
    [314,"turtleroll",0],
    [315,"turtleroll",0],
    [316,"turtleroll",0],
    [317,"turtleroll",0],
    [318,"turtleroll",0],
    [319,"turtleroll",0],
    [320,"turtleroll",0],
    [321,"turtleroll",0],
    [322,"upgrade",0],
    [323,"upgrade",0],
    [324,"upset",0],
    [325,"upset",0],
    [326,"upset",0],
    [327,"upset",0],
    [328,"upset",0],
    [329,"wheely",0],
    [330,"wheely",0],
    [331,"wheely",0],
    [332,"wiggle",0],
    [333,"win",0],
    [334,"win",0],
    [335,"win",0],
    [336,"win",0],
    [337,"win",0],
    [338,"win",0],
    [339,"win",0],
    [340,"win",0],
    [341,"win",0],
    [342,"win",0],
    [343,"win",0],
    [344,"win",0],
    [345,"win",0],
    [346,"win",0],
    [347,"win",0],
    [348,"win",0],
]

videos_subset = [
    [1,"admire",7],
    [2,"ask",0],
    [3,"ask",0],
    [4,"ask",2],
    [5,"ask",2],
    [6,"ask",2],
    [7,"ask",2],
    [8,"ask",0],
    [9,"ask",0],
    [26,"celebrat",0],
    [27,"celebrat",0],
    [28,"celebrat",0],
    [29,"celebrat",0],
    [30,"celebrat",0],
    [31,"dizzy",0],
    [32,"dizzy",0],
#    [33,"dizzy",2],
#    [34,"dizzy",2],
#    [35,"dizzy",2],
#    [36,"dizzy",2],
#    [37,"dizzy",2],
#    [38,"dizzy",2],
#    [39,"dizzy",2],
    [40,"dizzy",2],
    [41,"dizzy",0],
    [42,"dizzy",0],
    [43,"fail",0],
#    [44,"fail",0],
#    [45,"fail",0],
#    [46,"fail",0],
#    [47,"fail",0],
#    [48,"fail",0],
#    [49,"fail",2],
#    [50,"fail",2],
#    [51,"fail",2],
#    [52,"fail",2],
#    [53,"fail",0],
#    [54,"fail",0],
#    [55,"fail",0],
#    [56,"fail",0],
#    [57,"fail",0],
#    [58,"fail",2],
#    [59,"fail",2],
#    [60,"fail",2],
    [61,"fail",2],
    [62,"fail",2],
    [63,"fail",2],
    [64,"fail",2],
    [65,"fail",2],
    [66,"fail",2],
    [67,"find",2],
    [68,"found",2],
#    [69,"frustrated",2],
#    [70,"frustrated",2],
#    [71,"frustrated",2],
#    [72,"frustrated",2],
#    [73,"frustrated",2],
#    [74,"frustrated",2],
    [75,"giggle",2],
#    [76,"guarddog",2],
#    [77,"guarddog",0],
#    [78,"guarddog",0],
#    [79,"guarddog",0],
#    [80,"guarddog",0],
    [81,"guarddog",5],
    [82,"guarddog",1],
    [83,"guarddog",1],
    [84,"guarddog",1],
#    [85,"guarddog",1],
#    [86,"guarddog",1],
#    [87,"guarddog",1],
#    [88,"guarddog",1],
#    [89,"guarddog",1],
#    [90,"guarddog",2],
#    [91,"guarddog",2],
#    [92,"happy",2],
#    [93,"happy",2],
#    [94,"happy",2],
#    [95,"happy",2],
#    [96,"happy",2],
#    [97,"happy",2],
#    [98,"happy",2],
#    [99,"happy",2],
    [100,"happy",2],
    [101,"happy",2],
    [102,"happy",2],
    [103,"happy",2],
    [104,"hello",0],
    [105,"hello",0],
#    [106,"hello",0],
#    [107,"hello",0],
#    [108,"hello",0],
    [109,"lorem",2],
    [110,"ipsum",0],
    [111,"dolor",0],
]

videos = videos_subset

def get_videos():
    vid_selection = []
    groups_found = [] #disjunct video groups (hello, happy, ...) that have been found

    p = default_p

    #print("Trying to get %d videos." % target_n)

    while len(vid_selection) < target_n:
        #print("Looking at videos that have been rated max %d times" % p)

        for video in videos: 
            #Consider only those videos that have only been viewed p times before and no video of their group has been shown before
            if video[2] != p or video[1] in groups_found:
                continue
        
            vid_selection.append(video) #add video to selection
            groups_found.append(video[1])
            print("Video #%2d (%13s, rated %2d times) has been added to selection." % tuple(video))
            
            if len(vid_selection) == target_n: #Success!
                print("\n\033[92m%d videos have been found! Max. ratings considered: %d. Done! \033[0m" % (target_n, p))
                return vid_selection
        
        #uncomment here for demo of the problem!
        #print("Not enough videos have been found (%d/%d). Increasing p to %d." % (len(vid_selection), target_n, p+1))
        p += 1

def draw_progress(updated_videos):
    tmp = sp.call('clear',shell=True)
    for v in videos:
        if v in updated_videos:
            print("%3s (%13s) \033[92m%s\033[0m" % (v[0], v[1], '='*v[2] ))
        else:
            print("%3s (%13s) %s" % (v[0], v[1], '='*v[2] ))
    time.sleep(.2)

#########################################

target_n = 10 #number of videos that need to be selected in total (each from a diff. category) 
default_p = 0 #number of ratings a video can have to be considered for random selection

print("TOTAL VIDEOS:     %d" % len(videos))
print("TOTAL CATEGORIES: 12\n")
min_ratings_target = 15
min_ratings = 0
iterations = 0
while min_ratings < min_ratings_target:
    iterations+=1

    print("=============== SUBJECT #%d ===============\n" % iterations)

    selected_videos = get_videos()
    for video in selected_videos: #update the rating count for each video that has just been selected
        video[2] += 1

    new_min = min_ratings_target
    for video in videos: #find min rating
        new_min = min(new_min, video[2])
    min_ratings = new_min

draw_progress(selected_videos)